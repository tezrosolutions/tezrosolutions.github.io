{
    "docs": [
        {
            "location": "/", 
            "text": "Home\n\n\nOn this website you will find information about latest trends in the world of web and software development. You will also find best practises/guidelines for different platforms.\n\n\nBlogs\n\n\nView Latest Blogs\n\n\nGuidelines\n\n\nHubSpot", 
            "title": "Home"
        }, 
        {
            "location": "/#home", 
            "text": "On this website you will find information about latest trends in the world of web and software development. You will also find best practises/guidelines for different platforms.", 
            "title": "Home"
        }, 
        {
            "location": "/#blogs", 
            "text": "View Latest Blogs", 
            "title": "Blogs"
        }, 
        {
            "location": "/#guidelines", 
            "text": "HubSpot", 
            "title": "Guidelines"
        }, 
        {
            "location": "/blogs/", 
            "text": "Blog\n\n\nBlog posts on following topics coming soon\n\n\nReactJS\n\n\nAutomated Test\n\n\nBDD\n\n\nREST API\n\n\nServer Less\n\n\nMicor Services\n\n\nHubSpot", 
            "title": "Blog"
        }, 
        {
            "location": "/blogs/#blog", 
            "text": "Blog posts on following topics coming soon", 
            "title": "Blog"
        }, 
        {
            "location": "/blogs/#reactjs", 
            "text": "", 
            "title": "ReactJS"
        }, 
        {
            "location": "/blogs/#automated-test", 
            "text": "", 
            "title": "Automated Test"
        }, 
        {
            "location": "/blogs/#bdd", 
            "text": "", 
            "title": "BDD"
        }, 
        {
            "location": "/blogs/#rest-api", 
            "text": "", 
            "title": "REST API"
        }, 
        {
            "location": "/blogs/#server-less", 
            "text": "", 
            "title": "Server Less"
        }, 
        {
            "location": "/blogs/#micor-services", 
            "text": "", 
            "title": "Micor Services"
        }, 
        {
            "location": "/blogs/#hubspot", 
            "text": "", 
            "title": "HubSpot"
        }, 
        {
            "location": "/guidelines/hubspot/Archiving-Strategy/", 
            "text": "Archiving Strategy\n\n\nArchive all \nunused\n templates, modules, coded files, images and assets.", 
            "title": "Archiving Strategy"
        }, 
        {
            "location": "/guidelines/hubspot/Archiving-Strategy/#archiving-strategy", 
            "text": "Archive all  unused  templates, modules, coded files, images and assets.", 
            "title": "Archiving Strategy"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Emails/", 
            "text": "Developing Emails\n\n\nBackground\n\n\nThere are two ways to create an email template in HubSpot using Design Manager\nor using Coded files. From a compatibility perspective the latter approach is\npreferred, as it gives us more control over the template code. If due to some reasons\ncustomer prefers to build template using Design Manager, they should compromise\non potential compatibility problems.\n\n\nSetting Expectations\n\n\n\n\n\n\nThe email templates we develop are compatible with 33+ desktop and\nmobile email clients.\n\n\n\n\n\n\nWe use HubSpot built in Litmus testing for validating email\u2019s design in email\nclients.\n\n\n\n\n\n\nWe do real device testing for only important email clients.\n\n\n\n\n\n\nGmail mobile email client is known to have problems when displaying emails.\nWe can develop an email template that may display reasonably there but it\nwill have problems on other email clients. We normally shrink emails there.\n\n\n\n\n\n\nDevelopment Best Practices\n\n\n\n\n\n\nEach section in the email design should be translated as a module in HubSpot\nemail template.\n\n\n\n\n\n\nUse in-line CSS: Styles aren't always supported.\n\n\n\n\n\n\nUse table layouts: HTML div layouts are CSS dependent and not supported by\nmany of the email clients.\n\n\n\n\n\n\nDon't use rowspan: This causes weird spacing issues.\n\n\n\n\n\n\nDon't use background images: Support for these is limited.\n\n\n\n\n\n\nStyle image tags with \"display:block\": This fixes weird spacing issues with\nhotmail.\n\n\n\n\n\n\nIf using multiple tables, nest them in one parent table: This stops more weird\nspacing issues.\n\n\n\n\n\n\nDon't use Javascript: Again not supported very well.\n\n\n\n\n\n\nMake sure your email is legible with no images: The user may not load them.\n\n\n\n\n\n\nProvide an online version and link to it: This lets users see the intended\ncontent, even if their email client is terrible.\n\n\n\n\n\n\nTest on all available email clients using Litmus. Just because it works in one\nemail client doesn't mean it works in others.\n\n\n\n\n\n\nOutlook 2007 uses Word to render HTML.\n\n\n\n\n\n\nMake sure the can-spam is taken in account i.e. there should be a unsubscribe\nlink as well as physical address is included in the email.", 
            "title": "Developing Emails"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Emails/#developing-emails", 
            "text": "", 
            "title": "Developing Emails"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Emails/#background", 
            "text": "There are two ways to create an email template in HubSpot using Design Manager\nor using Coded files. From a compatibility perspective the latter approach is\npreferred, as it gives us more control over the template code. If due to some reasons\ncustomer prefers to build template using Design Manager, they should compromise\non potential compatibility problems.", 
            "title": "Background"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Emails/#setting-expectations", 
            "text": "The email templates we develop are compatible with 33+ desktop and\nmobile email clients.    We use HubSpot built in Litmus testing for validating email\u2019s design in email\nclients.    We do real device testing for only important email clients.    Gmail mobile email client is known to have problems when displaying emails.\nWe can develop an email template that may display reasonably there but it\nwill have problems on other email clients. We normally shrink emails there.", 
            "title": "Setting Expectations"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Emails/#development-best-practices", 
            "text": "Each section in the email design should be translated as a module in HubSpot\nemail template.    Use in-line CSS: Styles aren't always supported.    Use table layouts: HTML div layouts are CSS dependent and not supported by\nmany of the email clients.    Don't use rowspan: This causes weird spacing issues.    Don't use background images: Support for these is limited.    Style image tags with \"display:block\": This fixes weird spacing issues with\nhotmail.    If using multiple tables, nest them in one parent table: This stops more weird\nspacing issues.    Don't use Javascript: Again not supported very well.    Make sure your email is legible with no images: The user may not load them.    Provide an online version and link to it: This lets users see the intended\ncontent, even if their email client is terrible.    Test on all available email clients using Litmus. Just because it works in one\nemail client doesn't mean it works in others.    Outlook 2007 uses Word to render HTML.    Make sure the can-spam is taken in account i.e. there should be a unsubscribe\nlink as well as physical address is included in the email.", 
            "title": "Development Best Practices"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Modules/", 
            "text": "Developing Modules\n\n\nThe purpose of a HubSpot module is to promote reusability. It should be a preference to use modules whenever possible.", 
            "title": "Developing Modules"
        }, 
        {
            "location": "/guidelines/hubspot/Developing-Modules/#developing-modules", 
            "text": "The purpose of a HubSpot module is to promote reusability. It should be a preference to use modules whenever possible.", 
            "title": "Developing Modules"
        }, 
        {
            "location": "/guidelines/hubspot/External-Files/", 
            "text": "Including CSS, JavaScript files and Images (Not for Emails)\n\n\nCSS and JavaScript files\n\n\n\n\n\n\nAll JavaScript files will only be included in the footer.\n\n\n\n\n\n\nAll CSS files will only be included in the header.\n\n\n\n\n\n\nNo inline CSS and JavaScript is allowed. This will keep the code cleaner and\nmanageable.\n\n\n\n\n\n\nAny third party CSS and JavaScript library will be added to files called\nlibraries.css and libraries.js respectively. Separately including each library\nslows down the page load time and causes additional render blocking.\n\n\n\n\n\n\nAll the globally used CSS and Javascript should be put in global.css and\nglobal.js respectively.\n\n\n\n\n\n\nThe CSS and Javascript specific to the page should be put in page specific CSS\nand Javascript files.\n\n\n\n\n\n\nAll custom JavaScript code should be wrapped inside jquery document.ready\nfunction.\n\n\n\n\n\n\n\nImages\n\n\n\n\n\n\nWe will have three types of images i.e. 1x, 2x and 3x. Retina.js will be used to\ndynamically select the appropriate type for a screen.\n\n\n\n\n\n\nUse sprites and font icons whenever possible.", 
            "title": "Including CSS, JavaScript files and Images (Not for Emails)"
        }, 
        {
            "location": "/guidelines/hubspot/External-Files/#including-css-javascript-files-and-images-not-for-emails", 
            "text": "", 
            "title": "Including CSS, JavaScript files and Images (Not for Emails)"
        }, 
        {
            "location": "/guidelines/hubspot/External-Files/#css-and-javascript-files", 
            "text": "All JavaScript files will only be included in the footer.    All CSS files will only be included in the header.    No inline CSS and JavaScript is allowed. This will keep the code cleaner and\nmanageable.    Any third party CSS and JavaScript library will be added to files called\nlibraries.css and libraries.js respectively. Separately including each library\nslows down the page load time and causes additional render blocking.    All the globally used CSS and Javascript should be put in global.css and\nglobal.js respectively.    The CSS and Javascript specific to the page should be put in page specific CSS\nand Javascript files.    All custom JavaScript code should be wrapped inside jquery document.ready\nfunction.", 
            "title": "CSS and JavaScript files"
        }, 
        {
            "location": "/guidelines/hubspot/External-Files/#images", 
            "text": "We will have three types of images i.e. 1x, 2x and 3x. Retina.js will be used to\ndynamically select the appropriate type for a screen.    Use sprites and font icons whenever possible.", 
            "title": "Images"
        }, 
        {
            "location": "/guidelines/hubspot/Forms/", 
            "text": "Forms\n\n\nWe are assuming that the digital marketing team will manage the forms. If a change request also entails a form, the form to be used should be provided to the development team along with the requirements. The following video covers creating HubSpot forms.", 
            "title": "Forms"
        }, 
        {
            "location": "/guidelines/hubspot/Forms/#forms", 
            "text": "We are assuming that the digital marketing team will manage the forms. If a change request also entails a form, the form to be used should be provided to the development team along with the requirements. The following video covers creating HubSpot forms.", 
            "title": "Forms"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/", 
            "text": "Organizing Design Manager and File Manager\n\n\nProblem/Situation\n\n\nAt the moment our templates, modules, code files and other static assets are arranged\nin an unstructured way. There is apparently no organization in place! Every time a new\npage design request is received, a template is being started from scratch (although\nleveraging the existing modules and code where possible). At the end of day we have a\nhard time figuring out what template is being used and which one is not used any more.\nThe idea is to classify all templates, code files and static assets in an intuitive way.\n\n\n\nKey Guidelines\n\n\n\n\nAvoid special characters where possible.\n\n\nKeep the names and labels concise. They shouldn\u2019t be more than 25\ncharacters.\n\n\nA record retention strategy needs to be in place, we will talk about it in a bit.\n\n\nUse relevant date information in names and labels where possible, e.g. a\nfolder that contains all the templates built in January 2017 should have\nfollowing name i.e. 201701Templates. Use of reverse order date will ensure\nthat the list is displayed in chronological order (See Figure 1, Figure 2).\n\n\nUse short forms and abbreviations where possible for example a thank you\npage template can be called Template_TY.\n\n\nThe time unit for classifying stuff is a month e.g March 2018.\n\n\n\n\n\nThemes\n\n\nA new concept we want to introduce here is Themes. A theme encloses a set of\nsimilar looking page templates.\nWhenever a re-skin is needed, a new theme should be started. The developer should\nassign an intuitive name to the theme i.e. February2018-Redesign, AquaColors etc.\nIn order to create a theme all you have to do is create a folder in Design Manager\nand File Manager. See Figure 1.\n\n\n\n\nFigure 1\n\n\nThe next sections in this topic assume that you have already created a theme.\n\n\n\nNaming Folders\n\n\nTemplates\n\n\nInside a theme, all templates should be organized in folders. The name of these folders\nshould contain the date information in reverse order. Refer to point 4 in Key Guidelines\nsection. See Figure 2.\n\n\n\nCoded Files\n\n\nAll coded files such as Javascript and CSS files should be organized in a folder which has\nfollowing naming convention i.e. \n-Assets e.g. 2018Redesign-Assets. See\nFigure 3.\nAlso the master CSS file should be called styles.css and master Javascript file should be\ncalled scripts.js.\n\n\n\nFile Manager\n\n\nBased on our working experience, it is best to organize files based on the page or\nresource to which it belongs. For example all images for the home page should be\norganized in following manner: Theme \n Home \n Images \n 201712 (For all images\nused on home page in December 2017). See Figure 4.\n\n\n\n\nFigure 2\n\n\n\n\nFigure 3\n\n\n\n\nFigure 4\n\n\n\nNaming Templates\n\n\nNaming a template is pretty straightforward. Prepend the page name with the year\nand month, for example 201801 and a \u201c\nTemplate\n\u201d and append it with a \u201c_Live\u201d in\ncase the template is used for a live page. This will ensure that all live templates can\nbe searched using the Live flag.\nSome examples:\n1. A template for a live blog will be called 201812_Template_Blog_Live.\n2. A template for a development request demo page will be called\n20181112_Template_RequestDemo.\nWhenever a new template is live make sure you remove \"_Live\" from any previous live\ntemplate. At a given time only one template can have \"_Live\" flag in its name.\nIf a template has been revised more than once in a month, put day as well in the first\npart of the template name e.g. 20171230_Template_FAQs, 20171219_Template_FAQs.\n\n\n\nNaming Coded Files\n\n\nAll coded files should have a lower case name. For example CSS and Javascript files\nspecific to the Blog can be called blog.css and blog.js respectively. The idea is to use\nlower case name for all files, which the end user should not play around with, such as\nthe coded files.\n\n\n\nNaming Modules\n\n\nModules cannot be classified into templates. There are two types of modules though\ni.e Custom and Global.\n\n\n\nCustom Modules\n\n\nThe naming convention for a custom module should be intuitive and should reflect\nthe feature it is developed for and the reverse timestamp. For example if a module is\nbuild for a carousel in Feb 2018 and has to be used in theme 2018Redesign, it\nshould be called 201802_2018Redesign_Custom_Carousel. Use of reverse timestamp\nwill put list in a chronological order.\n\n\n\nGlobal Modules\n\n\nThe naming convention for global modules will remain similar to custom modules.\nJust replace Custom with Global e.g. a global module for header would be called\n201802_2018Redesign_Global_Header.\n\n\n\nNaming Module Fields\n\n\nA module field should be named in following order: Purpose Type e.g. if a text field\nis used for displaying headline in a hero area module, it should be called Headline\nText. Let HubSpot engine take care of internal naming.\n\n\n\nNaming Pages\n\n\nNaming pages is pretty straightforward e.g. FAQs, Terms and Conditions. Make sure\nany previous version of the page is archived when a new page goes live.\nThe internal name and title of the page should be identical.\n\n\n\nNaming CTAs\n\n\nWe are expecting the digital marketing team to provide details of the CTAs i.e. its\nURL, its label and should it open the URL in a new browser tab.\nThe CTA\u2019s name will also include timestamp in reverse order and the label. For\nexample if a CTA is for requesting a demo it should be named as\n201801_2018Redesign_Request_Demo.", 
            "title": "Organizing Design Manager and File Manager"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#organizing-design-manager-and-file-manager", 
            "text": "", 
            "title": "Organizing Design Manager and File Manager"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#problemsituation", 
            "text": "At the moment our templates, modules, code files and other static assets are arranged\nin an unstructured way. There is apparently no organization in place! Every time a new\npage design request is received, a template is being started from scratch (although\nleveraging the existing modules and code where possible). At the end of day we have a\nhard time figuring out what template is being used and which one is not used any more.\nThe idea is to classify all templates, code files and static assets in an intuitive way.", 
            "title": "Problem/Situation"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#key-guidelines", 
            "text": "Avoid special characters where possible.  Keep the names and labels concise. They shouldn\u2019t be more than 25\ncharacters.  A record retention strategy needs to be in place, we will talk about it in a bit.  Use relevant date information in names and labels where possible, e.g. a\nfolder that contains all the templates built in January 2017 should have\nfollowing name i.e. 201701Templates. Use of reverse order date will ensure\nthat the list is displayed in chronological order (See Figure 1, Figure 2).  Use short forms and abbreviations where possible for example a thank you\npage template can be called Template_TY.  The time unit for classifying stuff is a month e.g March 2018.", 
            "title": "Key Guidelines"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#themes", 
            "text": "A new concept we want to introduce here is Themes. A theme encloses a set of\nsimilar looking page templates.\nWhenever a re-skin is needed, a new theme should be started. The developer should\nassign an intuitive name to the theme i.e. February2018-Redesign, AquaColors etc.\nIn order to create a theme all you have to do is create a folder in Design Manager\nand File Manager. See Figure 1.   Figure 1  The next sections in this topic assume that you have already created a theme.", 
            "title": "Themes"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-folders", 
            "text": "", 
            "title": "Naming Folders"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#templates", 
            "text": "Inside a theme, all templates should be organized in folders. The name of these folders\nshould contain the date information in reverse order. Refer to point 4 in Key Guidelines\nsection. See Figure 2.", 
            "title": "Templates"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#coded-files", 
            "text": "All coded files such as Javascript and CSS files should be organized in a folder which has\nfollowing naming convention i.e.  -Assets e.g. 2018Redesign-Assets. See\nFigure 3.\nAlso the master CSS file should be called styles.css and master Javascript file should be\ncalled scripts.js.", 
            "title": "Coded Files"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#file-manager", 
            "text": "Based on our working experience, it is best to organize files based on the page or\nresource to which it belongs. For example all images for the home page should be\norganized in following manner: Theme   Home   Images   201712 (For all images\nused on home page in December 2017). See Figure 4.   Figure 2   Figure 3   Figure 4", 
            "title": "File Manager"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-templates", 
            "text": "Naming a template is pretty straightforward. Prepend the page name with the year\nand month, for example 201801 and a \u201c Template \u201d and append it with a \u201c_Live\u201d in\ncase the template is used for a live page. This will ensure that all live templates can\nbe searched using the Live flag.\nSome examples:\n1. A template for a live blog will be called 201812_Template_Blog_Live.\n2. A template for a development request demo page will be called\n20181112_Template_RequestDemo.\nWhenever a new template is live make sure you remove \"_Live\" from any previous live\ntemplate. At a given time only one template can have \"_Live\" flag in its name.\nIf a template has been revised more than once in a month, put day as well in the first\npart of the template name e.g. 20171230_Template_FAQs, 20171219_Template_FAQs.", 
            "title": "Naming Templates"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-coded-files", 
            "text": "All coded files should have a lower case name. For example CSS and Javascript files\nspecific to the Blog can be called blog.css and blog.js respectively. The idea is to use\nlower case name for all files, which the end user should not play around with, such as\nthe coded files.", 
            "title": "Naming Coded Files"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-modules", 
            "text": "Modules cannot be classified into templates. There are two types of modules though\ni.e Custom and Global.", 
            "title": "Naming Modules"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#custom-modules", 
            "text": "The naming convention for a custom module should be intuitive and should reflect\nthe feature it is developed for and the reverse timestamp. For example if a module is\nbuild for a carousel in Feb 2018 and has to be used in theme 2018Redesign, it\nshould be called 201802_2018Redesign_Custom_Carousel. Use of reverse timestamp\nwill put list in a chronological order.", 
            "title": "Custom Modules"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#global-modules", 
            "text": "The naming convention for global modules will remain similar to custom modules.\nJust replace Custom with Global e.g. a global module for header would be called\n201802_2018Redesign_Global_Header.", 
            "title": "Global Modules"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-module-fields", 
            "text": "A module field should be named in following order: Purpose Type e.g. if a text field\nis used for displaying headline in a hero area module, it should be called Headline\nText. Let HubSpot engine take care of internal naming.", 
            "title": "Naming Module Fields"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-pages", 
            "text": "Naming pages is pretty straightforward e.g. FAQs, Terms and Conditions. Make sure\nany previous version of the page is archived when a new page goes live.\nThe internal name and title of the page should be identical.", 
            "title": "Naming Pages"
        }, 
        {
            "location": "/guidelines/hubspot/Organizing-Design-Manager-and-File-Manager/#naming-ctas", 
            "text": "We are expecting the digital marketing team to provide details of the CTAs i.e. its\nURL, its label and should it open the URL in a new browser tab.\nThe CTA\u2019s name will also include timestamp in reverse order and the label. For\nexample if a CTA is for requesting a demo it should be named as\n201801_2018Redesign_Request_Demo.", 
            "title": "Naming CTAs"
        }, 
        {
            "location": "/guidelines/hubspot/Page-Load-Time/", 
            "text": "Page Load Time\n\n\nTThere is not much we can do on server side for improving page load times but here\nis what we should do on the client side:\n\n\n\n\n\n\nAdd Javascript files in footer only and CSS files in header only.\n\n\n\n\n\n\nAny third party CSS or JavaScript library will be added to a to a file like\nlibraries.js or libraries.css. Separately including each library slows down the\npage load time and causes additional render blocking.\n\n\n\n\n\n\nUse font icons where possible.\n\n\n\n\n\n\nUse sprites and low resolution images.\n\n\n\n\n\n\nMake sure only needed CSS and Javascript is loaded on the page.\n\n\n\n\n\n\nMake sure to load files on the page from CDNs as they have better caching\nmechanism. This will also ensure files are loaded from different domains in\npractice.\n\n\n\n\n\n\nImplement image lazy loading on the page where needed. Following library\ncan be used: http://jquery.eisbehr.de/lazy/example_basic-usage", 
            "title": "Page Load Time"
        }, 
        {
            "location": "/guidelines/hubspot/Page-Load-Time/#page-load-time", 
            "text": "TThere is not much we can do on server side for improving page load times but here\nis what we should do on the client side:    Add Javascript files in footer only and CSS files in header only.    Any third party CSS or JavaScript library will be added to a to a file like\nlibraries.js or libraries.css. Separately including each library slows down the\npage load time and causes additional render blocking.    Use font icons where possible.    Use sprites and low resolution images.    Make sure only needed CSS and Javascript is loaded on the page.    Make sure to load files on the page from CDNs as they have better caching\nmechanism. This will also ensure files are loaded from different domains in\npractice.    Implement image lazy loading on the page where needed. Following library\ncan be used: http://jquery.eisbehr.de/lazy/example_basic-usage", 
            "title": "Page Load Time"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/", 
            "text": "Quality Assurance\n\n\nMake sure the pages are tested properly before delivering. \n\n\nAutomated Testing\n\n\nWe will use Selenium for testing form submissions, links and interfaces. Please note that selenium testing will be rolled out in phases.\n\n\n\nForm Submission\n\n\nForm validations, post form submissions should be validated using Selenium.\n\n\n\nAnchors and links\n\n\nWe will use selenium or any other platform for testing all links on the pages. The target is that all links land on the correct page and there are no 404s.\n\n\n\nUser Interface\n\n\nAll of the user interface cannot be tested automatically; only the area above the fold can be validated using image comparison tools. \n\n\n\nManual Testing\n\n\nThe user interface needs to be tested on all major browsers and devices as per \nthis\n testcase suite.\n\n\nThe parts that are compared using automated tools, needs to be validated as well.\n\n\nThe automated testing can have potential errors initially, its better to test all things manually as well just to ensure automated testing is up to mark.", 
            "title": "Quality Assurance"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#quality-assurance", 
            "text": "Make sure the pages are tested properly before delivering.", 
            "title": "Quality Assurance"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#automated-testing", 
            "text": "We will use Selenium for testing form submissions, links and interfaces. Please note that selenium testing will be rolled out in phases.", 
            "title": "Automated Testing"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#form-submission", 
            "text": "Form validations, post form submissions should be validated using Selenium.", 
            "title": "Form Submission"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#anchors-and-links", 
            "text": "We will use selenium or any other platform for testing all links on the pages. The target is that all links land on the correct page and there are no 404s.", 
            "title": "Anchors and links"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#user-interface", 
            "text": "All of the user interface cannot be tested automatically; only the area above the fold can be validated using image comparison tools.", 
            "title": "User Interface"
        }, 
        {
            "location": "/guidelines/hubspot/Quality-Assurance/#manual-testing", 
            "text": "The user interface needs to be tested on all major browsers and devices as per  this  testcase suite.  The parts that are compared using automated tools, needs to be validated as well.  The automated testing can have potential errors initially, its better to test all things manually as well just to ensure automated testing is up to mark.", 
            "title": "Manual Testing"
        }, 
        {
            "location": "/guidelines/hubspot/Search-Engine-Optimization/", 
            "text": "SEO\n\n\nSearch Engine Optimization (SEO) is of paramount importance and is a non-trivial\naspect of the page being developed.\n\n\nNormally a page either it\u2019s a website page, a landing page or a blog post, it is\ndeveloped around a keyword. That keyword can be a normal keyword or a long-tail\nkeyword. The best practice is to use the keyword in page html title, URL, tagline and\nin the body. See Figure 5.\n\n\n\nFigure 5\n\n\n\nUsing h1 ad h2 tags\n\n\nSearch engines prioritize elements on the page using special algorithms. A search engine would generally give significance to elements such as h1, h2 tags. \nThat\u2019s why make sure you put the page tagline in h1 tag and section titles in h2 tag\n.\n\n\n\u2003\n\n\nCanonical URLs\n\n\nCanonical URLs are used to tell search engines that a certain set of URLs are actually just one page. This helps in preserving the original page rank as well as any link values. \n\n\nAn easy way to set Canonical URLs in HubSpot is to define it in the Content Settings for a specific domain. See Figure 6.\n\n\n\nFigure 6\n\n\n\nAlt Text for Images\n\n\nAlt text plays an important role in establishing your page rank. The developer has to\nensure that all the images on the page are properly tagged with an alt text. Client\nneeds to provide alt text for every image on the page.", 
            "title": "SEO"
        }, 
        {
            "location": "/guidelines/hubspot/Search-Engine-Optimization/#seo", 
            "text": "Search Engine Optimization (SEO) is of paramount importance and is a non-trivial\naspect of the page being developed.  Normally a page either it\u2019s a website page, a landing page or a blog post, it is\ndeveloped around a keyword. That keyword can be a normal keyword or a long-tail\nkeyword. The best practice is to use the keyword in page html title, URL, tagline and\nin the body. See Figure 5.  \nFigure 5", 
            "title": "SEO"
        }, 
        {
            "location": "/guidelines/hubspot/Search-Engine-Optimization/#using-h1-ad-h2-tags", 
            "text": "Search engines prioritize elements on the page using special algorithms. A search engine would generally give significance to elements such as h1, h2 tags.  That\u2019s why make sure you put the page tagline in h1 tag and section titles in h2 tag .", 
            "title": "Using h1 ad h2 tags"
        }, 
        {
            "location": "/guidelines/hubspot/Search-Engine-Optimization/#canonical-urls", 
            "text": "Canonical URLs are used to tell search engines that a certain set of URLs are actually just one page. This helps in preserving the original page rank as well as any link values.   An easy way to set Canonical URLs in HubSpot is to define it in the Content Settings for a specific domain. See Figure 6.  \nFigure 6", 
            "title": "Canonical URLs"
        }, 
        {
            "location": "/guidelines/hubspot/Search-Engine-Optimization/#alt-text-for-images", 
            "text": "Alt text plays an important role in establishing your page rank. The developer has to\nensure that all the images on the page are properly tagged with an alt text. Client\nneeds to provide alt text for every image on the page.", 
            "title": "Alt Text for Images"
        }, 
        {
            "location": "/guidelines/hubspot/Staging-Environment/", 
            "text": "Staging Environment\n\n\nWebsite and Landing Pages\n\n\nAll the website and landing pages have to follow the staging workflow. This means\nwhenever a change is requested on a page which is already live, make sure a staging\nequivalent is created at the top of it. This staging version will be used for any new\ndevelopment work and client demonstration.\n\n\nIf a new page is being developed, even then make sure that it follows the staging\nworkflow.\n\n\nThe practice of creating live drafts will suspended.\n\n\n\n\nBlogs\n\n\nStaging environment doesn\u2019t work for HubSpot Blogs. A work around is to create a\nnew HubSpot Blog and make it invisible to search engines by adding following metatag\nin the content settings.\n\n\nmeta name=\"robots\" content=\"noindex\"\n\n\nAlso make sure you select a demo domain for all staging blogs. Delete the test blog\nwhen it is no longer needed.", 
            "title": "Staging Environment"
        }, 
        {
            "location": "/guidelines/hubspot/Staging-Environment/#staging-environment", 
            "text": "", 
            "title": "Staging Environment"
        }, 
        {
            "location": "/guidelines/hubspot/Staging-Environment/#website-and-landing-pages", 
            "text": "All the website and landing pages have to follow the staging workflow. This means\nwhenever a change is requested on a page which is already live, make sure a staging\nequivalent is created at the top of it. This staging version will be used for any new\ndevelopment work and client demonstration.  If a new page is being developed, even then make sure that it follows the staging\nworkflow.  The practice of creating live drafts will suspended.", 
            "title": "Website and Landing Pages"
        }, 
        {
            "location": "/guidelines/hubspot/Staging-Environment/#blogs", 
            "text": "Staging environment doesn\u2019t work for HubSpot Blogs. A work around is to create a\nnew HubSpot Blog and make it invisible to search engines by adding following metatag\nin the content settings.  meta name=\"robots\" content=\"noindex\"  Also make sure you select a demo domain for all staging blogs. Delete the test blog\nwhen it is no longer needed.", 
            "title": "Blogs"
        }, 
        {
            "location": "/guidelines/hubspot/checklist/", 
            "text": "Checklist for client when assigning a task\n\n\n\n\n\n\nProvide following Mockups\n\n\n\n\nA ~375px mockup is needed for Phones.\n\n\nA ~960px is needed for Tablets Landscape.\n\n\nA ~ 1440px is need for Medium Resolution Desktops.\n\n\n(Optional) A ~1920px is needed for High Resolution Desktops.\n\n\n\n\n\n\n\n\nCreate and convey the forms.\n\n\n\n\n\n\nGive CTA information i.e. its URL, its label and should it open the URL in a new browser tab.\n\n\n\n\n\n\nProvide images in 1x, 2x and 3x (optional) size.\n\n\n\n\n\n\nSEO information such as h1 \n h2 tags, canonical URL, page title and page URL.\n\n\n\n\n\n\nAlt text for images used on the page.", 
            "title": "Checklist for client when assigning a task"
        }, 
        {
            "location": "/guidelines/hubspot/checklist/#checklist-for-client-when-assigning-a-task", 
            "text": "Provide following Mockups   A ~375px mockup is needed for Phones.  A ~960px is needed for Tablets Landscape.  A ~ 1440px is need for Medium Resolution Desktops.  (Optional) A ~1920px is needed for High Resolution Desktops.     Create and convey the forms.    Give CTA information i.e. its URL, its label and should it open the URL in a new browser tab.    Provide images in 1x, 2x and 3x (optional) size.    SEO information such as h1   h2 tags, canonical URL, page title and page URL.    Alt text for images used on the page.", 
            "title": "Checklist for client when assigning a task"
        }, 
        {
            "location": "/guidelines/hubspot/images/", 
            "text": "Mockups and Images\n\n\nMockups\n\n\nProviding a mockup for every screen resolution is not possible so we have stream lined the process. \n\n\n\n\nA ~375px mockup is needed for Phones.\n\n\nA ~960px is needed for Tablets Landscape.\n\n\nA ~ 1440px is need for Medium Resolution Desktops.\n\n\n(Optional) A ~1920px is needed for High Resolution Desktops.\n\n\n\n\n\nImages and Logos\n\n\nDifferent screen densities require different size images e.g. 1x, 2x and 3x. It is preferable to provide all sizes of images. We will use \nRetina.js\n to dynamically display images based on screen densities. \n\n\nThis approach won\u2019t work on emails and we expect you to give us 2x images for emails.", 
            "title": "Mockups and Images"
        }, 
        {
            "location": "/guidelines/hubspot/images/#mockups-and-images", 
            "text": "", 
            "title": "Mockups and Images"
        }, 
        {
            "location": "/guidelines/hubspot/images/#mockups", 
            "text": "Providing a mockup for every screen resolution is not possible so we have stream lined the process.    A ~375px mockup is needed for Phones.  A ~960px is needed for Tablets Landscape.  A ~ 1440px is need for Medium Resolution Desktops.  (Optional) A ~1920px is needed for High Resolution Desktops.", 
            "title": "Mockups"
        }, 
        {
            "location": "/guidelines/hubspot/images/#images-and-logos", 
            "text": "Different screen densities require different size images e.g. 1x, 2x and 3x. It is preferable to provide all sizes of images. We will use  Retina.js  to dynamically display images based on screen densities.   This approach won\u2019t work on emails and we expect you to give us 2x images for emails.", 
            "title": "Images and Logos"
        }, 
        {
            "location": "/guidelines/hubspot/", 
            "text": ".bs-sidebar {\n    display: none;\n}\n\n\n\n\nHubSpot Guidelines\n\n\nThis section covers the best practices and guidelines for working on HubSpot.\n\n\nOrganizing Design Manager and File Manager\n\n\nForms\n\n\nMockups and Images\n\n\nQuality Assurance\n\n\nIncluding CSS, JavaScript files and Images (Not for Emails)\n\n\nPage Load Time\n\n\nDeveloping Emails\n\n\nDeveloping Modules\n\n\nStaging Environment\n\n\nArchiving Strategy\n\n\nSEO\n\n\nChecklist for client when assigning a task", 
            "title": "Home"
        }, 
        {
            "location": "/guidelines/hubspot/#hubspot-guidelines", 
            "text": "This section covers the best practices and guidelines for working on HubSpot.  Organizing Design Manager and File Manager  Forms  Mockups and Images  Quality Assurance  Including CSS, JavaScript files and Images (Not for Emails)  Page Load Time  Developing Emails  Developing Modules  Staging Environment  Archiving Strategy  SEO  Checklist for client when assigning a task", 
            "title": "HubSpot Guidelines"
        }
    ]
}